/**
\mainpage firewireDCAM EPICS Support Module
Author: Ulrik Pedersen, Diamond Light Source Ltd.

February 2011

The firewireDCAM module is distributed under the LGPL. See the COPYING and COPYING.LESSER files for details or visit http://www.gnu.org/licenses

\section intro_sec Introduction

This module is a Linux firewire (IEEE 1394) camera driver plug-in for another EPICS support module/framework: <a href="http://cars9.uchicago.edu/software/epics/areaDetector.html">areaDetector</a> by Mark Rivers,  University of Chicago.

\section cameras Firewire IEEE1394 Cameras
This module uses a set of open source libraries to control the cameras. The main library is <a href="http://damien.douxchamps.net/ieee1394/libdc1394">libdc1394</a> which is able to control firewire cameras that comply with the IIDC DCAM protocol. Please see the libdc1394 <a href="http://damien.douxchamps.net/ieee1394/cameras/">list of cameras</a> and the <a href="http://damien.douxchamps.net/ieee1394/libdc1394/v2.x/faq/">libdc1394 FAQ</a> for more details about which cameras can be used with libdc1394 (note that the developer of this module has only tested with a limited number of camera models: Point Grey Flea2 and AVR Pike)

Digital video recorders with tapes or other local memory typically does not comply with the IIDC DCAM protocol! Cameras that produce compressed images are not supported either. This module does not and is not planned to provide any compression or decompression features. If such feature is needed it is recommended to develop a compression plug-in to the areaDetector framework.

The module supports both 1394A [400Mb/s] and 1394B [800Mb/s] mode cameras.

\section download Where to get it
Released versions of the module can be downloaded as source code tarballs from the Diamond website. See <a href="http://controls.diamond.ac.uk/downloads/support">DLS controls</a> "EPICS support modules".

If you want to contribute code to the repository, please contact the maintainer of this module for further details. 

\section build_sec How to build
For information about how to build the module, and dealing with various dependencies, please see the \ref build_instructions.

\section getting_started Getting Started
The \ref user_manual contain information about the supplied database template, configuration functions and how to modify the provided example to suit your camera and how to get it running initially.


**/



/**
\page build_instructions Build Instructions
These build instructions assume some knowledge of building EPICS modules. It is a requirement that <a href="http://www.aps.anl.gov/epics/base/index.php">EPICS base</a> has already been downloaded and successfully build with all the common environment variables set. 

\section dependencies Dependencies
\subsection epics_base_and_modules EPICS base and modules

\li EPICS base <a href="http://www.aps.anl.gov/epics/base/R3-14/11.php">R3.14.11</a>
\li <a href="http://www.aps.anl.gov/epics/modules/soft/asyn">asyn</a> 4-14
\li <a href="http://cars9.uchicago.edu/software/epics/areaDetector.html">areaDetector</a> 1-7beta1

\subsection optional_dependencies Optional Dependencies
The <a href="http://controls.diamond.ac.uk/downloads/support/ffmpegServer">ffmpegServer</a> module is recommended for new firewire (or any areaDetector) IOCs. This plugin provide mjpeg compression and with the <a href="http://controls.diamond.ac.uk/downloads/support/nullhttpd">nullhttpd</a> module also http streaming for client side image viewing. It also provides a QT/OpenGL based viewer application.

\subsection Firewire IIDC DCAM libraries
The Linux firewire camera support libraries are:
\li <a href="http://sourceforge.net/project/showfiles.php?group_id=8157">libdc1394</a> 2.1.2
\li <a href="http://www.linux1394.org/download.php">libraw1394</a> 1.3.0

\section kernel_libs Kernel Modules
The libdc1394 and libraw1394 libraries depend on a set of drivers/kernel modules that will need to be loaded. There are basically two options when selecting the firewire kernel modules: the traditional ohci1394 (and friends) or the newer 'Juju' stack. Most distributions (with the notable exception of Fedora 6+ and RHEL5+) ship with the traditional firewire stack. The 'Juju' stack removes the requirement to use the raw1394 kernel module.

Recently we have begun testing the newer 'Juju' stack but have yet to use this in production systems so all instructions here refer to the old firewire stack. 

However, this new kernel module does appear to work well and is recommended for new setups. The firewireDCAM module does not need any modifications to work with either linux firewire modules. libdc1394 in recent versions will also work with either kernel module without the need for recompilation.

Depending on Linux distribution and kernel configuration the firewire kernel modules may need to be loaded as root using the modprobe command. For instance for the traditional firewire stack you will typically need to do:
\verbatim
/sbin/modprobe video1394
/sbin/modprobe raw1394
\endverbatim

When using the traditional firewire stack the following command can inform if the correct kernel modules have been loaded:
\verbatim
[up45@pc0033 example] /sbin/lsmod | grep 1394
video1394              21273  0
raw1394                29753  0
ohci1394               35845  1 video1394
ieee1394              293753  3 video1394,raw1394,ohci1394
\endverbatim

\subsection device_permissions Device Permissions
Once the kernel modules are loaded you must ensure that the user that will run the IOC application has read+write permissions on the necessary device files. The files in question can be checked for permissions with the following commands:
\verbatim
[up45@pc0033 ~] ls -al /dev/video1394/*
crw-rw-rw- 1 root root 171, 16 Sep 30 11:04 /dev/video1394/0
[up45@pc0033 ~] ls -al /dev/raw1394
crw-rw-rw- 1 root root 171, 0 Sep 30 11:04 /dev/raw1394
\endverbatim


\section building_1394_libs Building the 1394 libraries
Please check the INSTALL or README files provided with the 1394 libraries for installation notes. Libraw1394 need to be build before libdc1394 to get the dependencies right.

The basic build and installation is fairly simple (the last step possibly as root, depending on the installation location):
\verbatim
./configure
make
make install
\endverbatim

However, in order to build the firewireDCAM module within the EPICS framework it is suggested to build the 1394 libraries in a way so they can appear as an EPICS support module. I.e. let the libraries be build into a lib/linux-x86/ directory. This can be achieved with the following commands (same commands apply for libdc1394):
\verbatim
tar -zxf libraw1394-1.3.0.tar.gz
cd libraw1394-1.3.0
./configure --bindir=/my/raw1394/install/dir/bin/linux-x86 \
            --libdir=/my/raw1394/install/dir/lib/linux-x86 \
            --datarootdir=/my/raw1394/install/dir/doc \
            --prefix=/my/raw1394/install/dir
make
make install
\endverbatim

Tarballs with suitable makefiles and configure directory can be supplied if requested to ease the building of these libraries as 'EPICS modules'.

If you choose to install the libdc1394 and raw1394 libraries in their default location, you will need to edit the your IOC's src/Makefile to point the build system to the right path where it can find the library files. See \ref example/exampleApp/src/Makefile as an example and note the comments. Also remember to remove the corresponding dc1394 and raw1394 dependency lines from configure/RELEASE.

\section building_firewireDCAM Building firewireDCAM
The building of this module is almost like building any other EPICS support module:
\li Build the 1394 libraries as described above.
\li Build the EPICS support modules listed under dependencies.
\li Edit the firewireDCAM/configure/RELEASE file to point to the file paths where the dependencies and EPICS base are installed.
\li Build with the make command.
\li Optionally: Build the example
 - Edit example/configure/RELEASE to point to all dependency modules
 - Possibly modify example/exampleApp/src/Makefile if you have installed the 1394 libraries in a custom location (see above)
 - cd example; make
 

**/






/**
\page user_manual User Manual
The firewireDCAM module is a plug-in to the areaDetector framework. It is recommended to get familiar with the framework when starting to use this plug-in. Excellent documentation can be found on the <a href="http://cars9.uchicago.edu/software/epics/areaDetector.html">areaDetector documentation</a> page.

AreaDetector provides a number of ready-made templates, MEDM screens and plug-ins that can be used for general control and data readout. These are all fairly generic to 2D detectors. 

Note as this is a plug-in module to a larger framework, it is not considered an end-user application. A number of things will need to be done to enable an end-user to operate cameras:
\li An IOC binary need to be build with a startup script and possibly substitutions files to instantiate all the necessary or desired templates.
\li Custom templates or databases may need to be developed to suit specific controls requirement in your application.
\li End user client display of the images is not included in this package. The data can be streamed to disk using the <a href="http://cars9.uchicago.edu/software/epics/NDPluginFile.html">NDPluginFile plug-in</a> or grabbed by any Channel Access client through the PVs available in the <a href="http://cars9.uchicago.edu/software/epics/NDPluginStdArrays.html">NDPluginStdArrays</a>

The following sections describes the templates and configuration functions this plug-in module provides and how to use them.

\section db_template Database Template
One database template is supplied to enable control and read back of all camera features. See \ref firewireDCAM.template for details regarding macros and what features and records are available.

\section startup_script Startup Script
A couple of startup scripts are supplied in the example/iocBoot/iocexample/ directory. These startup scripts have a number of macros that will need to be substituted before running them. The EPICS build system at DLS will automate this and place the substituted startup files in example/bin/linux-x86/stexample.boot but other sites may possibly not have the same build system rules...

\subsection config_functions Configuration Functions
A number of areaDetector plug-ins are used in the example startup scripts. Please see the relevant documentation from areaDetector and modify according to your needs. The plug-ins configuration function documentation can be found on the areaDetector website: <a href="http://cars9.uchicago.edu/software/epics/NDPluginStdArrays.html#Configuration">NDPluginStdArrays</a> and <a href="http://cars9.uchicago.edu/software/epics/NDPluginROI.html#Configuration">NDPluginROI</a>

In order to initialise the firewire bus and each individual camera, two configuration functions need to be called during startup to initialise the module: 
\li \ref FDC_InitBus(): This need to be called only once to initialise the bus before FDC_Config can be called. This function does not need any arguments.
\li \ref FDC_Config(): \copydoc FDC_Config()

\section example Example
The module is supplied with an example that will build an IOC binary. Startup scripts are also provided but obviusly need to be modified to the specific cameras to be used.

\subsection screenshots Screenshots
The example running one Point Grey Flea2 camera with 1024x768 resolution \@30fps. The data is sent through the areaDetector ROI plugin and 3 ROIs are being used: one that takes the entire image from the camera as the main ROI and two smaller ones. The CPU load on the server (a dual core Dell Poweredge 200) is around 76 percent of one core in this case.

\image html Screenshot-1.png This is a caption

**/






