/**
\mainpage firewireDCAM EPICS Support Module
Author: Ulrik Pedersen, Diamond Light Source Ltd.

December 2008

The firewireDCAM module is distributed under the LGPL. See the COPYING and COPYING.LESSER files for details or visit http://www.gnu.org/licenses

\section intro_sec Introduction

This module is a Linux firewire (IEEE 1394) camera driver plug-in for another EPICS support module/framework: <a href="http://cars9.uchicago.edu/software/epics/areaDetectorDoc.html">areaDetector</a> by Mark Rivers,  University of Chicago.

\section cameras Firewire IEEE1394 Cameras
This module uses a set of open source libraries to control the cameras. The main library is <a href="http://damien.douxchamps.net/ieee1394/libdc1394">libdc1394</a> which is able to control firewire cameras that comply with the IIDC DCAM protocol. Please see the libdc1394 <a href="http://damien.douxchamps.net/ieee1394/cameras/">list of cameras</a> and the <a href="http://damien.douxchamps.net/ieee1394/libdc1394/v2.x/faq/">libdc1394 FAQ</a> for more details about which cameras can be used with libdc1394 (note that the developer of this module has only tested with a limited number of camera models: Point Grey Flea2 and AVR Pike)

Digital video recorders with tapes or other local memory typically does not comply with the IIDC DCAM protocol! Cameras that produce compressed images are not supported either. This module does not and is not planned to provide any compression or decompression features. If such feature is needed it is recommended to develop a compression plug-in to the areaDetector framework.

The module supports both 1394A [400Mb\\s] and 1394B [800Mb\\s] mode cameras but only in 8 bit per pixel MONO mode, and 24 bits per pixel RGB mode!

\section download Where to get it
Released versions of the module can be downloaded as source code tarballs from the Diamond website. See <a href="http://controls.diamond.ac.uk/downloads">DLS controls</a> "EPICS support modules".

Development versions can be checked out of the Subversion repository for the <a href="http://sourceforge.net/projects/epics">EPICS applications</a> project. A user account is not required to check out/download the code from the subversion repository, just issue the following command:
\verbatim
svn co https://epics.svn.sourceforge.net/svnroot/epics/applications/trunk/firewireDCAM
\endverbatim

If you want to contribute code to the repository, please contact the maintainer of this module for further details. 


\section build_sec How to build
For information about how to build the module, and dealing with various dependencies, please see the \ref build_instructions.

\section getting_started Getting Started
The \ref user_manual contain information about the supplied database template, configuration functions and how to modify the provided example to suit your camera and how to get it running initially.

\section release_sec Release Notes
Information about known problems and bugs, missing features and so on can be found here: \ref release_notes

**/



/**
\page build_instructions Build Instructions
These build instructions assume some knowledge of building EPICS modules. It is a requirement that <a href="http://www.aps.anl.gov/epics/base/index.php">EPICS base</a> has already been downloaded and successfully build with all the common environment variables set. 

\section dependencies Dependencies
\subsection epics_base_and_modules EPICS base and modules

\li EPICS base <a href="http://www.aps.anl.gov/epics/base/R3-14/8.php">R3.14.8.2</a>
\li <a href="http://www.aps.anl.gov/epics/modules/soft/asyn">asyn</a> 4-10
\li <a href="http://cars9.uchicago.edu/software/epics/areaDetector.html">areaDetector</a> 1-3


\subsection Firewire IIDC DCAM libraries
The Linux firewire camera support libraries are:
\li <a href="http://sourceforge.net/project/showfiles.php?group_id=8157">libdc1394</a> 2.0.2
\li <a href="http://www.linux1394.org/download.php">libraw1394</a> 1.3.0

\section kernel_libs Kernel Modules
The libdc1394 and libraw1394 libraries depend on a set of drivers/kernel modules that will need to be loaded. There are basically two options when selecting the firewire kernel modules: the traditional ohci1394 (and friends) or the newer 'Juju' stack. Most distributions (with the notable exception of Fedora 6+ and RHEL5+) ship with the traditional firewire stack.

Although the 'Juju' stack seems to be the future solution it is not yet very mature. See the libdc1394 FAQ and mailing lists for details of the differences between the two sets of kernel modules. Please report back to the maintainer of this module if you get it working with the Juju stack.

Depending on Linux distribution and kernel configuration the firewire kernel modules may need to be loaded as root using the modprobe command. For instance for the traditional firewire stack you will typically need to do:
\verbatim
/sbin/modprobe video1394
/sbin/modprobe raw1394
\endverbatim

When using the traditional firewire stack the following command can inform if the correct kernel modules have been loaded:
\verbatim
[up45@pc0033 example] /sbin/lsmod | grep 1394
video1394              21273  0
raw1394                29753  0
ohci1394               35845  1 video1394
ieee1394              293753  3 video1394,raw1394,ohci1394
\endverbatim

\subsection device_permissions Device Permissions
Once the kernel modules are loaded you must ensure that the user that will run the IOC application has read+write permissions on the necessary device files. The files in question can be checked for permissions with the following commands:
\verbatim
[up45@pc0033 ~] ls -al /dev/video1394/*
crw-rw-rw- 1 root root 171, 16 Sep 30 11:04 /dev/video1394/0
[up45@pc0033 ~] ls -al /dev/raw1394
crw-rw-rw- 1 root root 171, 0 Sep 30 11:04 /dev/raw1394
\endverbatim


\section building_1394_libs Building the 1394 libraries
Please check the INSTALL or README files provided with the 1394 libraries for installation notes. Libraw1394 need to be build before libdc1394 to get the dependencies right.

The basic build and installation is fairly simple (the last step possibly as root, depending on the installation location):
\verbatim
./configure
make
make install
\endverbatim

However, in order to build the firewireDCAM module within the EPICS framework it is suggested to build the 1394 libraries in a way so they can appear as an EPICS support module. I.e. let the libraries be build into a lib/linux-x86/ directory. This can be achieved with the following commands (same commands apply for libdc1394):
\verbatim
tar -zxf libraw1394-1.3.0.tar.gz
cd libraw1394-1.3.0
./configure --bindir=/my/raw1394/install/dir/bin/linux-x86 \
            --libdir=/my/raw1394/install/dir/lib/linux-x86 \
            --datarootdir=/my/raw1394/install/dir/doc \
            --prefix=/my/raw1394/install/dir
make
make install
\endverbatim

Tarballs with suitable makefiles and configure directory can be supplied if requested to ease the building of these libraries as 'EPICS modules'.

If you choose to install the libdc1394 and raw1394 libraries in their default location, you will need to edit the your IOC's src/Makefile to point the build system to the right path where it can find the library files. See \ref example/exampleApp/src/Makefile as an example and note the comments. Also remember to remove the corresponding dc1394 and raw1394 dependency lines from configure/RELEASE.

\section building_firewireDCAM Building firewireDCAM
The building of this module is almost like building any other EPICS support module:
\li Build the 1394 libraries as described above.
\li Build the EPICS support modules listed under dependencies.
\li Edit the firewireDCAM/configure/RELEASE file to point to the file paths where the dependencies and EPICS base are installed.
\li Build with the make command.
\li Optionally: Build the example
 - Edit example/configure/RELEASE to point to all dependency modules
 - Possibly modify example/exampleApp/src/Makefile if you have installed the 1394 libraries in a custom location (see above)
 - cd example; make
 

**/






/**
\page user_manual User Manual
The firewireDCAM module is a plug-in to the areaDetector framework. It is recommended to get familiar with the framework when starting to use this plug-in. Excellent documentation can be found on the <a href="http://cars9.uchicago.edu/software/epics/areaDetectorDoc.html">areaDetector documentation</a> page.

AreaDetector provides a number of ready-made templates, MEDM screens and plug-ins that can be used for general control and data readout. These are all fairly generic to 2D detectors. 

Note as this is a plug-in module to a larger framework, it is not considered an end-user application. A number of things will need to be done to enable an end-user to operate cameras:
\li An IOC binary need to be build with a startup script and possibly substitutions files to instantiate all the necessary or desired templates.
\li Custom templates or databases may need to be developed to suit specific controls requirement in your application.
\li End user client display of the images is not included in this package. The data can be streamed to disk using the <a href="http://cars9.uchicago.edu/software/epics/NDPluginFile.html">NDPluginFile plug-in</a> or grabbed by any Channel Access client through the PVs available in the <a href="http://cars9.uchicago.edu/software/epics/NDPluginStdArrays.html">NDPluginStdArrays</a>

The following sections describes the templates and configuration functions this plug-in module provides and how to use them.

\section db_template Database Template
One database template is supplied to enable control and read back of all camera features. See \ref firewireDCAM.db for details regarding macros and what features and records are available.

\section startup_script Startup Script
A couple of startup scripts are supplied in the example/iocBoot/iocexample/ directory. These startup scripts have a number of macros that will need to be substituted before running them. The EPICS build system at DLS will automate this and place the substituted startup files in example/bin/linux-x86/stexample.boot but other sites may possibly not have the same build system rules...

\subsection config_functions Configuration Functions
A number of areaDetector plug-ins are used in the example startup scripts. Please see the relevant documentation from areaDetector and modify according to your needs. The plug-ins configuration function documentation can be found on the areaDetector website: <a href="http://cars9.uchicago.edu/software/epics/NDPluginStdArrays.html#Configuration">NDPluginStdArrays</a> and <a href="http://cars9.uchicago.edu/software/epics/NDPluginROI.html#Configuration">NDPluginROI</a>

In order to initialise the firewire bus and each individual camera, two configuration functions need to be called during startup to initialise the module: 
\li \ref FDC_InitBus(): This need to be called only once to initialise the bus before FDC_Config can be called. This function does not need any arguments.
\li \ref FDC_Config(): \copydoc FDC_Config()

\section example Example
The module is supplied with an example that will build an IOC binary. Startup scripts are also provided but obviusly need to be modified to the specific cameras to be used.

\subsection screenshots Screenshots
The example running one Point Grey Flea2 camera with 1024x768 resolution \@30fps. The data is sent through the areaDetector ROI plugin and 3 ROIs are being used: one that takes the entire image from the camera as the main ROI and two smaller ones. The CPU load on the server (a dual core Dell Poweredge 200) is around 76 percent of one core in this case.

\image html Screenshot-1.png This is a caption

**/







/**
\page release_notes Release Notes


\section known_problems Known Problems
A few problems are known already. Since this module is not yet in heavy use anywhere this list is likely to grow in the next few months. Please report any problems (and preferably any work around or fixes) you come across to the maintainer of this module.

\li Attempts to set a floating point (absolute) feature value to the camera does not work. It is not known whether this is a limitation of the camera, the firewire libraries or just a bug in this module.
\li On ISO bus errors the camera will stop transmitting images and thus be halted forever in the dc1394_enqueue function in the image grabbing task. 
 - Stopping and restarting transmission does not seem to get the camera out of this state. 
 - A possible solution could be to disable the camera off the bus and re-enable it again (a feature that we need anyway to get over the 4/8 DMA channels limitation on the bus).
 - If your camera stops on some bus error you will see a message like "ohci1394: fw-host0: isochronous cycle too long" output from dmesg. The explanation to this according to various 1394 mailing lists are often down to hardware problems. 
 - In my experience this situation sometime occur if firewire cables are too long and/or the cameras do not have enough power supplied.
\li Changing framerate when a camera is acquiring will currently just stop the acquisition and then change the framerate. Ideally the camera should then pick up acquisition again afterwards. This has proven a bit difficult to get working reliably.


\section todo_tasks Still Todo...
This is a list of tasks and things that are currently not implemented in this version. Some features may already be implemented in the development version of the module which can be checked out from the SourceForge subversion repository (check the logs).\n
\li Setting and reading back trigger options. Currently the module expect the camera to work with an internal trigger. This is not a big task to add.
\li Display the DMA buffer status. 
 - It could be a useful diagnostic tool to have an indication of how full the DMA buffer is in the libdc1394 library. 
 - The API allow reading out this information and it should be a simple job to add.
\li Using the more powerful scalable format7 mode. The format7 mode is a scalable 'Region Of Interest' mode where a ROI (just one) on the image sensor can be selected and transferred over the bus.
 - Currently the driver only works on the fixed size modes (it selects the largest fixed-size mode with 8bit per pixel mono or 24bit per pixel RGB)
 - Larger parts of the camera sensor can be used as several cameras have bigger CCDs than the fixed-size modes can handle.
 - Would allow several more cameras to run at the same time as bandwidth can be cut down when only using a small ROI.
 - Higher framerates can be achieved with smaller ROI.
 - This is a fairly complex task as several features (in particular framerate control) works in different ways when using format7. However, this is also a high priority task and is already being worked on.
\li Automatic reset of the firewire ISO channels at startup. This would basically 'reset' and re-enumerate the whole firewire bus during startup. 
 - A bus reset is sometimes necessary if a firewire application has shut down unexpectedly or while acquisition has been ongoing. On the Linux command line a reset can be done manually by executing a small application that comes with the libdc1394 library: dc1394_reset_bus.
 - A function to clean up when exiting the IOC should also be added...
\li Empty the DMA buffer when starting up the camera acquisition.
\li Add a camera enable/disable function to get a camera on/off the DMA channels. 
 - Most firewire cards have only 4 DMA channels available (Agere chipsets have 8). It would be good to have more cameras on the bus at the same time even though only 4 can acquire data at the same time.
\li Revisit thread-safety. 
 - The libdc1394 is supposedly thread-safe across multiple cameras. However, the mailing lists and documentation is not very clear on whether it is safe to access individual cameras from different threads.
 - So far it seems to work to access individual cameras from different threads but we need to understand it better and possibly add relevant locking/synchronising.
\li Implement some information about the units of various features. This has proven to be rather difficult as different manufacturers use different engineering units for various features. If anyone knows how to calculate engineering units for things like brightness, gain and so on please feed this information back.

**/

