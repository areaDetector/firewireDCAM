## \file firewireDCAM.db
## \brief Template database file to control the features of a firewire camera.
## See the detailled description for information about macros and how features 
## can be controlled and read out: 
##
## This templates provides control and read back of all camera 'features' provided through
## the IIDC DCAM protocol. The PV names are put together using the \$(P) and \$(CAM) macros,
## the feature name [brackets in the list below] and the feature parameters. For instance the PV
## name for the Gain readback would look like: \$(P)\$(CAM):GAIN_RBV 
##
## \section feature_list Feature List
## See below for the full list of all features but keep in mind
## that not all firewire cameras need to implement all of these features:
## \li Brightness [BRIGHTNESS]
## \li Exposure [EXPOSURE]
## \li Sharpness [SHARPNESS]
## \li White Balance [WHITEB]
## \li Hue [HUE]
## \li Saturation [SATURATION]
## \li Gamma [GAMMA]
## \li Shutter [SHUTTER]
## \li Gain [GAIN]
## \li Iris [IRIS]
## \li Focus [FOCUS]
## \li Temperature [TEMP]
## \li Trigger [TRIGGER]
## \li Trigger Delay [TRIGDLY]
## \li White Shading [WHITES]
## \li Framerate [FRAMERATE]*
## \li Zoom [ZOOM]
## \li Pan [PAN]
## \li Tilt [TILT]
## \li Optical Filter [FILTER]
## \li Capture Size [CAPTSIZE]
## \li Capture Quality [QUALITY]
##
## \note *: Frame rate is not recommended to set using the feature interface. The \$(P)\$(CAM):FR and \$(P)\$(CAM):FR_RBV
## records provide more convenient mbbo/mbbi enum interface to available framerates.
## 
## \section feature_parameters Feature Parameters
## For each feature a set of 12 records control and read back all available parameters related to the individual feature.
## The following lists all the parameters that can be read and set in every feature:
## \li Read back whether the camera supports the specific feature or not: "not available" or "available" (bi) [_AVL]
## \li Set integer value (ao) []
## \li Read current integer value (ai) [_RBV]
## \li Set control mode: manual = user configured; auto = camera sets values (mbbo) [_CTRL]*
## \li Read back current control mode (mbbi) [_CTRL_RBV]
## \li Read back maximum integer boundary (ai) [_MAX]
## \li Read back minimum integer boundary (ai) [_MIN]
## \li Read whether the camera supports 'absolute' feature control. I.e. floating point read and/or write control
##     of the specific feature. "not available" or "available" (bi) [_ABS_AVL]
## \li Set the features absolute (floating point) value (a0) [_ABS]**
## \li Read back the current absolute value of the given feature (ai) [_ABS_RBV]
## \li Read the current absolute maximum value (ai) [_ABS_MAX]
## \li Read the current absolute minimum value (ai) [_ABS_MIN]
##
## \note *: This may not be implemented in all cameras, however all cameras should be able to manage attempts
## to change this setting without crashing.
## \note **: Setting this absolute value does not currently work. See the release notes for details.
##
##

## Change the framerate when the camera is not in the ROI/format7 mode
record(mbbo, "$(P)$(CAM):FR") {
  field(SCAN, "Passive")
  field(PINI, "NO")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)FDC_FRAMERATE")
  field(ZRST, "N/A")
  field(ONST, "1.875")
  field(TWST, "3.75")
  field(THST, "7.5")
  field(FRST, "15")
  field(FVST, "30")
  field(SXST, "60")
  field(ZRVL, "0x0")
  field(ONVL, "0x1")
  field(TWVL, "0x2")
  field(THVL, "0x3")
  field(FRVL, "0x4")
  field(FVVL, "0x5")
  field(SXVL, "0x6")
}

## Read back the framerate setting when not in ROI/format7 mode.
record(mbbi, "$(P)$(CAM):FR_RBV") {
  field(SCAN, "I/O Intr")
  #field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(ZRST, "N/A")
  field(ONST, "1.875")
  field(TWST, "3.75")
  field(THST, "7.5")
  field(FRST, "15")
  field(FVST, "30")
  field(SXST, "60")
  field(INP, "@asyn($(PORT) 0)FDC_FRAMERATE")
  field(ZRVL, "0x0")
  field(ONVL, "0x1")
  field(TWVL, "0x2")
  field(THVL, "0x3")
  field(FRVL, "0x4")
  field(FVVL, "0x5")
  field(SXVL, "0x6")
}




# ---------------- Feature control below here  ---------------- 



# ---------------- Feature Brightness control ----------------

# Set the brightness value (int32)
record(ao, "$(P)$(CAM):BRIGHTNESS") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)FDC_FEAT_VAL")
}

# Read the brightness value (int32)
record(ai, "$(P)$(CAM):BRIGHTNESS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the brightness control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):BRIGHTNESS_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 0)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the brightness control mode 
record(bi, "$(P)$(CAM):BRIGHTNESS_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):BRIGHTNESS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read brightness boundaries
record(ai, "$(P)$(CAM):BRIGHTNESS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):BRIGHTNESS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):BRIGHTNESS_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 0)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):BRIGHTNESS_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 0)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
record(ai, "$(P)$(CAM):BRIGHTNESS_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 0)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}


# Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):BRIGHTNESS_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 0)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):BRIGHTNESS_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 0)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}


#  ----------------  Feature Exposure control  ---------------- 

# Set the exposure value (int32)
record(ao, "$(P)$(CAM):EXPOSURE") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 1)FDC_FEAT_VAL")
}

# Read the exposure value (int32)
record(ai, "$(P)$(CAM):EXPOSURE_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 1)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the EXPOSURE control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):EXPOSURE_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 1)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the EXPOSURE control mode 
record(bi, "$(P)$(CAM):EXPOSURE_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 1)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):EXPOSURE_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 1)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read exposure boundaries
record(ai, "$(P)$(CAM):EXPOSURE_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 1)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):EXPOSURE_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 1)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):EXPOSURE_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 1)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):EXPOSURE_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 1)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
record(ai, "$(P)$(CAM):EXPOSURE_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 1)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}


# Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):EXPOSURE_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 1)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):EXPOSURE_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 1)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}


#  ----------------  Feature Sharpness control  ---------------- 

# Set the SHARPNESS value (int32)
record(ao, "$(P)$(CAM):SHARPNESS") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 2)FDC_FEAT_VAL")
}

# Read the SHARPNESS value (int32)
record(ai, "$(P)$(CAM):SHARPNESS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 2)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the SHARPNESS control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):SHARPNESS_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 2)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the SHARPNESS control mode 
record(bi, "$(P)$(CAM):SHARPNESS_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 2)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):SHARPNESS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 2)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read exposure boundaries
record(ai, "$(P)$(CAM):SHARPNESS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 2)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):SHARPNESS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 2)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}


## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):SHARPNESS_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 2)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):SHARPNESS_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 2)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
record(ai, "$(P)$(CAM):SHARPNESS_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 2)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}


# Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):SHARPNESS_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 2)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):SHARPNESS_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 2)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}



#  ----------------  Feature White Balance control  ---------------- 

# Set the WHITEB value (int32)
record(ao, "$(P)$(CAM):WHITEB") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 3)FDC_FEAT_VAL")
}

# Read the GAIN value (int32)
record(ai, "$(P)$(CAM):WHITEB_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 3)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the WHITEB control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):WHITEB_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 3)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the WHITEB control mode 
record(bi, "$(P)$(CAM):WHITEB_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 3)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):WHITEB_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 3)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read exposure boundaries
record(ai, "$(P)$(CAM):WHITEB_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 3)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):WHITEB_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 3)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):WHITEB_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 3)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):WHITEB_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 3)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
record(ai, "$(P)$(CAM):WHITEB_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 3)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):WHITEB_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 3)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):WHITEB_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 3)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}


#  ----------------  Feature Hue control  ---------------- 
# Set the HUE value (int32)
record(ao, "$(P)$(CAM):HUE") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 4)FDC_FEAT_VAL")
}

# Read the HUE value (int32)
record(ai, "$(P)$(CAM):HUE_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 4)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the HUE control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):HUE_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 4)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the HUE control mode 
record(bi, "$(P)$(CAM):HUE_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 4)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):HUE_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 4)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read exposure boundaries
record(ai, "$(P)$(CAM):HUE_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 4)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):HUE_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 4)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):HUE_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 4)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):HUE_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 4)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
record(ai, "$(P)$(CAM):HUE_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 4)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):HUE_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 4)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):HUE_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 4)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}



#  ----------------  Feature Saturation control  ---------------- 
# Set the SATURATION value (int32)
record(ao, "$(P)$(CAM):SATURATION") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 5)FDC_FEAT_VAL")
}

# Read the SATURATION value (int32)
record(ai, "$(P)$(CAM):SATURATION_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 5)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the SATURATION control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):SATURATION_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 5)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the SATURATION control mode 
record(bi, "$(P)$(CAM):SATURATION_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 5)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):SATURATION_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 5)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read exposure boundaries
record(ai, "$(P)$(CAM):SATURATION_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 5)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):SATURATION_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 5)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):SATURATION_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 5)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):SATURATION_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 5)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
record(ai, "$(P)$(CAM):SATURATION_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 5)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):SATURATION_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 5)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):SATURATION_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 5)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}





#  ----------------  Feature Gamma control  ---------------- 
# Set the GAMMA value (int32)
record(ao, "$(P)$(CAM):GAMMA") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 5)FDC_FEAT_VAL")
}

# Read the GAMMA value (int32)
record(ai, "$(P)$(CAM):GAMMA_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 6)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the GAMMA control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):GAMMA_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 6)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the GAMMA control mode 
record(bi, "$(P)$(CAM):GAMMA_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 6)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):GAMMA_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 6)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read exposure boundaries
record(ai, "$(P)$(CAM):GAMMA_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 6)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):GAMMA_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 6)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):GAMMA_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 6)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):GAMMA_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 6)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
record(ai, "$(P)$(CAM):GAMMA_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 6)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):GAMMA_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 6)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):GAMMA_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 6)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}






#  ----------------  Feature Shutter control  ---------------- 
# Set the SHUTTER value (int32)
record(ao, "$(P)$(CAM):SHUTTER") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 7)FDC_FEAT_VAL")
}

# Read the SHUTTER value (int32)
record(ai, "$(P)$(CAM):SHUTTER_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 7)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the SHUTTER control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):SHUTTER_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 7)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the SHUTTER control mode 
record(bi, "$(P)$(CAM):SHUTTER_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 7)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):SHUTTER_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 7)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read exposure boundaries
record(ai, "$(P)$(CAM):SHUTTER_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 7)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):SHUTTER_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 7)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):SHUTTER_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 7)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):SHUTTER_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 7)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
record(ai, "$(P)$(CAM):SHUTTER_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 7)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):SHUTTER_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 7)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):SHUTTER_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 7)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}




#  ----------------  Feature Gain control  ---------------- 

# Set the GAIN value (int32)
record(ao, "$(P)$(CAM):GAIN") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 8)FDC_FEAT_VAL")
}

# Read the GAIN value (int32)
record(ai, "$(P)$(CAM):GAIN_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 8)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the GAIN control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):GAIN_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 8)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the GAIN control mode 
record(bi, "$(P)$(CAM):GAIN_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 8)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):GAIN_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 8)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read exposure boundaries
record(ai, "$(P)$(CAM):GAIN_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 8)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):GAIN_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 8)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):GAIN_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 8)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):GAIN_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 8)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
record(ai, "$(P)$(CAM):GAIN_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 8)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):GAIN_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 8)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):GAIN_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 8)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}

#  ----------------  Feature Iris control  ---------------- 
## Set the IRIS value (int32)
record(ao, "$(P)$(CAM):IRIS") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 9)FDC_FEAT_VAL")
}

## Read the IRIS value (int32)
record(ai, "$(P)$(CAM):IRIS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 9)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the IRIS control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):IRIS_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 9)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the IRIS control mode 
record(bi, "$(P)$(CAM):IRIS_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 9)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):IRIS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 9)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

## Read exposure boundaries
record(ai, "$(P)$(CAM):IRIS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 9)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}

record(ai, "$(P)$(CAM):IRIS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 9)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):IRIS_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 9)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

## Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):IRIS_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 9)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

## Read the feature absolute value
record(ai, "$(P)$(CAM):IRIS_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 9)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}

## Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):IRIS_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 9)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

## Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):IRIS_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 9)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}


#  ----------------  Feature Focus control  ---------------- 
## Set the FOCUS value (int32)
record(ao, "$(P)$(CAM):FOCUS") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 10)FDC_FEAT_VAL")
}

## Read the FOCUS value (int32)
record(ai, "$(P)$(CAM):FOCUS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 10)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the FOCUS control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):FOCUS_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 10)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the FOCUS control mode 
record(bi, "$(P)$(CAM):FOCUS_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 10)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):FOCUS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 10)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

## Read exposure boundaries
record(ai, "$(P)$(CAM):FOCUS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 10)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):FOCUS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 10)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):FOCUS_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 10)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

## Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):FOCUS_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 10)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

## Read the feature absolute value
record(ai, "$(P)$(CAM):FOCUS_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 10)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}

## Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):FOCUS_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 10)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

## Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):FOCUS_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 10)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}





#  ----------------  Feature Temperature control  ---------------- 
# Set the temperature value (int32)
record(ao, "$(P)$(CAM):TEMP") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 11)FDC_FEAT_VAL")
}

# Read the temperature value (int32)
record(ai, "$(P)$(CAM):TEMP_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 11)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the temperature control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):TEMP_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 11)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the temperature control mode 
record(bi, "$(P)$(CAM):TEMP_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 11)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):TEMP_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 11)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read exposure boundaries
record(ai, "$(P)$(CAM):TEMP_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 11)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):TEMP_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 11)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):TEMP_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 11)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):TEMP_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 11)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
record(ai, "$(P)$(CAM):TEMP_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 11)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):TEMP_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 11)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):TEMP_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 11)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}




#  ----------------  Feature Trigger control  ---------------- 
# Set the Trigger configuration (int32)
record(ao, "$(P)$(CAM):TRIGGER") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 12)FDC_FEAT_VAL")
}

# Read the Trigger value (int32)
record(ai, "$(P)$(CAM):TRIGGER_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 12)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the Trigger control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):TRIGGER_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 12)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the Trigger control mode 
record(bi, "$(P)$(CAM):TRIGGER_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 12)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):TRIGGER_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 12)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read exposure boundaries
record(ai, "$(P)$(CAM):TRIGGER_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 12)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):TRIGGER_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 12)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):TRIGGER_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 12)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):TRIGGER_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 12)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
record(ai, "$(P)$(CAM):TRIGGER_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 12)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):TRIGGER_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 12)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):TRIGGER_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 12)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}



#  ----------------  Feature Trigger Delay control  ---------------- 
# Set the Trigger Delay setting (int32)
record(ao, "$(P)$(CAM):TRIGDLY") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 13)FDC_FEAT_VAL")
}

# Read the Trigger Delay value (int32)
record(ai, "$(P)$(CAM):TRIGDLY_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 13)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the Trigger Delay control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):TRIGDLY_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 13)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the Trigger Delay control mode 
record(bi, "$(P)$(CAM):TRIGDLY_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 13)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):TRIGDLY_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 13)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read exposure boundaries
record(ai, "$(P)$(CAM):TRIGDLY_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 13)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):TRIGDLY_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 13)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):TRIGDLY_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 13)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):TRIGDLY_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 13)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
record(ai, "$(P)$(CAM):TRIGDLY_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 13)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):TRIGDLY_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 13)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):TRIGDLY_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 13)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}



#  ----------------  Feature White Shading control  ---------------- 
# Set the White Shading setting (int32)
record(ao, "$(P)$(CAM):WHITES") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 14)FDC_FEAT_VAL")
}

# Read the White Shading value (int32)
record(ai, "$(P)$(CAM):WHITES_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 14)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the White Shading control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):WHITES_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 14)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the White Shading control mode 
record(bi, "$(P)$(CAM):WHITES_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 14)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):WHITES_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 14)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read exposure boundaries
record(ai, "$(P)$(CAM):WHITES_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 14)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):WHITES_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 14)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):WHITES_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 14)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):WHITES_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 14)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
record(ai, "$(P)$(CAM):WHITES_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 14)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):WHITES_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 14)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):WHITES_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 14)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}




#  ----------------  Feature Frame Rate control  ---------------- 

# Set the Frame Rate setting (int32)
record(ao, "$(P)$(CAM):FRAMERATE") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 15)FDC_FEAT_VAL")
}

# Read the Frame Rate value (int32)
record(ai, "$(P)$(CAM):FRAMERATE_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 15)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the Frame Rate control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):FRAMERATE_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 15)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the Frame Rate control mode 
record(bi, "$(P)$(CAM):FRAMERATE_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 15)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):FRAMERATE_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 15)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read exposure boundaries
record(ai, "$(P)$(CAM):FRAMERATE_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 15)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):FRAMERATE_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 15)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):FRAMERATE_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 15)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):FRAMERATE_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 15)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
record(ai, "$(P)$(CAM):FRAMERATE_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 15)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):FRAMERATE_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 15)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):FRAMERATE_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 15)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}





#  ----------------  Feature Zoom control  ---------------- 

# Set the Zoom setting (int32)
record(ao, "$(P)$(CAM):ZOOM") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 16)FDC_FEAT_VAL")
}

# Read the Zoom value (int32)
record(ai, "$(P)$(CAM):ZOOM_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 16)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the Zoom control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):ZOOM_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 16)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the Zoom control mode 
record(bi, "$(P)$(CAM):ZOOM_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 16)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):ZOOM_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 16)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read exposure boundaries
record(ai, "$(P)$(CAM):ZOOM_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 16)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):ZOOM_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 16)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):ZOOM_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 16)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):ZOOM_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 16)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
record(ai, "$(P)$(CAM):ZOOM_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 16)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):ZOOM_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 16)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):ZOOM_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 16)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}




#  ----------------  Feature Pan control  ---------------- 

# Set the Pan setting (int32)
record(ao, "$(P)$(CAM):PAN") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 17)FDC_FEAT_VAL")
}

# Read the Pan value (int32)
record(ai, "$(P)$(CAM):PAN_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 17)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the Pan control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):PAN_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 17)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the Pan control mode 
record(bi, "$(P)$(CAM):PAN_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 17)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):PAN_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 17)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read exposure boundaries
record(ai, "$(P)$(CAM):PAN_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 17)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):PAN_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 17)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):PAN_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 17)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):PAN_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 17)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
record(ai, "$(P)$(CAM):PAN_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 17)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):PAN_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 17)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):PAN_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 17)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}




#  ----------------  Feature Tilt control  ---------------- 

# Set the Tilt setting (int32)
record(ao, "$(P)$(CAM):TILT") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 18)FDC_FEAT_VAL")
}

# Read the Tilt value (int32)
record(ai, "$(P)$(CAM):TILT_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 18)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the Tilt control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):TILT_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 18)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the Tilt control mode 
record(bi, "$(P)$(CAM):TILT_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 18)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):TILT_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 18)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read exposure boundaries
record(ai, "$(P)$(CAM):TILT_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 18)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):TILT_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 18)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):TILT_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 18)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):TILT_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 18)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
record(ai, "$(P)$(CAM):TILT_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 18)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):TILT_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 18)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):TILT_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 18)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}



#  ----------------  Feature Optical Filter control  ---------------- 

# Set the Optical Filter setting (int32)
record(ao, "$(P)$(CAM):FILTER") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 19)FDC_FEAT_VAL")
}

# Read the Optical Filter value (int32)
record(ai, "$(P)$(CAM):FILTER_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 19)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the Optical Filter control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):FILTER_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 19)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the Optical Filter control mode 
record(bi, "$(P)$(CAM):FILTER_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 19)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):FILTER_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 19)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read exposure boundaries
record(ai, "$(P)$(CAM):FILTER_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 19)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):FILTER_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 19)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):FILTER_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 19)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):FILTER_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 19)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
record(ai, "$(P)$(CAM):FILTER_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 19)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):FILTER_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 19)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):FILTER_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 19)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}





#  ----------------  Feature Capture Size control  ---------------- 

# Set the Capture Size setting (int32)
record(ao, "$(P)$(CAM):CAPTSIZE") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 20)FDC_FEAT_VAL")
}

# Read the Capture Size value (int32)
record(ai, "$(P)$(CAM):CAPTSIZE_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 20)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the Capture Size control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):CAPTSIZE_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 20)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the Capture Size control mode 
record(bi, "$(P)$(CAM):CAPTSIZE_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 20)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):CAPTSIZE_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 20)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read exposure boundaries
record(ai, "$(P)$(CAM):CAPTSIZE_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 20)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):CAPTSIZE_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 20)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):CAPTSIZE_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 20)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):CAPTSIZE_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 20)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
record(ai, "$(P)$(CAM):CAPTSIZE_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 20)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):CAPTSIZE_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 20)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):CAPTSIZE_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 20)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}



#  ----------------  Feature Capture Quality control  ---------------- 
# Set the Capture Quality setting (int32)
record(ao, "$(P)$(CAM):QUALITY") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 21)FDC_FEAT_VAL")
}

# Read the Capture Quality value (int32)
record(ai, "$(P)$(CAM):QUALITY_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 21)FDC_FEAT_VAL")
  field(PINI, "YES")
}

## Set the Capture Quality control mode (manual = user configured /auto = camera sets values)
record(bo, "$(P)$(CAM):QUALITY_CTRL") {
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT) 21)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read back the Capture Quality control mode 
record(bi, "$(P)$(CAM):QUALITY_CTRL_RBV") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 21)FDC_FEAT_MODE")
  field(ZNAM, "MANUAL")
  field(ONAM, "AUTO")
}

## Read whether the camera supports this feature
record(bi, "$(P)$(CAM):QUALITY_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 21)FDC_FEAT_AVAILABLE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Read exposure boundaries
record(ai, "$(P)$(CAM):QUALITY_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 21)FDC_FEAT_VAL_MIN")
  field(PINI, "YES")
}
record(ai, "$(P)$(CAM):QUALITY_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 21)FDC_FEAT_VAL_MAX")
  field(PINI, "YES")
}

## Read whether the camera supports absolute (floating point) control of this feature 
record(bi, "$(P)$(CAM):QUALITY_ABS_AVL") {
  field(SCAN, "I/O Intr")
  field(PINI, "YES")
  field(DTYP, "asynInt32")
  field(INP, "@asyn($(PORT) 21)FDC_FEAT_ABSOLUTE")
  field(ZNAM, "not available")
  field(ONAM, "available")
}

# Set the feature absolute value (floating point)
record(ao, "$(P)$(CAM):QUALITY_ABS") {
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT) 21)FDC_FEAT_VAL_ABS")
  field(PREC, "3")
}

# Read the feature absolute value
record(ai, "$(P)$(CAM):QUALITY_ABS_RBV") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 21)FDC_FEAT_VAL_ABS")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value max boundary
record(ai, "$(P)$(CAM):QUALITY_ABS_MAX") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 21)FDC_FEAT_VAL_ABS_MAX")
  field(PINI, "YES")
  field(PREC, "3")
}

# Read the feature absolute value min boundary
record(ai, "$(P)$(CAM):QUALITY_ABS_MIN") {
  field(SCAN, "I/O Intr")
  field(DTYP, "asynFloat64")
  field(INP, "@asyn($(PORT) 21)FDC_FEAT_VAL_ABS_MIN")
  field(PINI, "YES")
  field(PREC, "3")
}

